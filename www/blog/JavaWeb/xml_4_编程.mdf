# XML编程
利用java程序增删改查(CRUD)


## DOM解析
1. DOM的全称是Document Object Model，也即文档对象模型。在应用程序中，基于DOM的XML分析器将一个XML文档转换成一个对象模型的集合（通常称DOM树），应用程序正是通过对这个对象模型的操作，来实现对XML文档数据的操作。通过DOM接口，应用程序可以在任何时候访问XML文档中的任何一部分数据，因此，这种利用DOM接口的机制也被称作随机访问机制。
2. DOM接口提供了一种通过分层对象模型来访问XML文档信息的方式，这些分层对象模型依据XML的文档结构形成了一棵节点树。无论XML文档中所描述的是什么类型的信息，即便是制表数据、项目列表或一个文档，利用DOM所生成的模型都是节点树的形式。也就是说，DOM强制使用树模型来访问XML文档中的信息。由于XML本质上就是一种分层结构，所以这种描述方法是相当有效的。
3. DOM树所提供的随机访问方式给应用程序的开发带来了很大的灵活性，它可以任意地控制整个XML文档中的内容。然而，由于DOM分析器把整个XML文档转化成DOM树放在了内存中，因此，当文档比较大或者结构比较复杂时，对内存的需求就比较高。而且，对于结构复杂的树的遍历也是一项耗时的操作。所以，DOM分析器对机器性能的要求比较高，实现效率不十分理想。不过，由于DOM分析器所采用的树结构的思想与XML文档的结构相吻合，同时鉴于随机访问所带来的方便，因此，DOM分析器还是有很广泛的使用价值的。
4. 
 - 优点:
	- 十分便于进行增删改查的操作
	- 只需解析一次拿到dom对象后可以重复使用
 - 缺点:
	- 解析过程比较慢,需要将整个文档都解析完成后才能进行操作
	- 需要将整个dom树的内容都加载到内存中来,比较耗费内存,当文档过大,这种解析方式对内存的耗损非常严重.
	
## SAX解析
1. SAX的全称是Simple APIs for XML，也即XML简单应用程序接口。与DOM不同，SAX提供的访问模式是一种顺序模式，这是一种快速读写XML数据的方式。当使用SAX分析器对XML文档进行分析时，会触发一系列事件，并激活相应的事件处理函数，应用程序通过这些事件处理函数实现对XML文档的访问，因而SAX接口也被称作事件驱动接口。
2. 
 - 优点:
	- 不需要等待整个xml加载到内存,当解析到某一部分时自动触发到对应的方法去处理,处理的效率比较高
	- 不需要将整个文档加载到内存中,对内存的耗损比较少
 - 缺点:
	- 每次解析都只能处理一次,下次再想处理还要重新解析
	- 只能进行查询不能进行增删改的操作.
